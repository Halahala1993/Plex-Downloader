# Java Gradle CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-java/ for more details
#
version: 2.1
executors:
  docker-publisher:
    environment:
      IMAGE_NAME: halahala/plex-downloader
      _JAVA_OPTIONS: -Xmx2g
      TERM: dumb
      GRADLE_OPTS: '-Dorg.gradle.daemon=false'
      TOOL_NODE_FLAGS: --max_old_space_size=2048
      NODE_OPTIONS: --max_old_space_size=2048
    docker:
      - image: circleci/buildpack-deps:stretch
jobs:
  build:
    docker:
      # specify the version you desire here
      - image: circleci/openjdk:8-jdk

      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4

    working_directory: ~/repo

    environment:
      # Customize the JVM maximum heap limit
      _JAVA_OPTIONS: -Xmx2g
      TERM: dumb
      GRADLE_OPTS: '-Dorg.gradle.daemon=false'
      TOOL_NODE_FLAGS: --max_old_space_size=2048
      NODE_OPTIONS: --max_old_space_size=2048
#      GRADLE_OPTS: '-Dorg.gradle.jvmargs="-Xmx3g" -XX:+HeapDumpOnOutOfMemoryError -Dorg.gradle.daemon=false'

    steps:
      - checkout

      # Download and cache dependencies
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "build.gradle" }}
            # fallback to using the latest cache if no exact match is found
            - v1-dependencies-

      - run: gradle dependencies

      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}

      # run tests!
      - run: gradle test
  docker-build:
    executor: docker-publisher
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Build Docker image
          command: |
            docker build -t $IMAGE_NAME:latest .
      - run:
          name: Archive Docker image
          command: docker save -o image.tar $IMAGE_NAME
      - persist_to_workspace:
          root: .
          paths:
            - ./image.tar
  docker-publish:
    executor: docker-publisher
    steps:
      - attach_workspace:
          at: /tmp/workspace
      - setup_remote_docker
      - run:
          name: Load archived Docker image
          command: docker load -i /tmp/workspace/image.tar
      - run:
          name: Publish Docker Image to Docker Hub
          command: |
            echo "$DOCKERHUB_PASS" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
            IMAGE_TAG="0.0.${CIRCLE_BUILD_NUM}"
            docker tag $IMAGE_NAME:latest $IMAGE_NAME:$IMAGE_TAG
            docker push $IMAGE_NAME:latest
            docker push $IMAGE_NAME:$IMAGE_TAG

workflows:
  version: 2
  build-master:
    jobs:
      - build:
          filters:
            branches:
              only:
                - master
                - develop
      - docker-build:
          requires:
            - build
          filters:
            branches:
              only:
                - master
                - develop
      - docker-publish:
          requires:
            - docker-build
          filters:
            branches:
              only: master
#  build-tags:
#    jobs:
#      - build:
#          filters:
#            tags:
#              only: /^v.*/
#            branches:
#              ignore: /.*/
#      - publish-tag:
#          requires:
#            - build
#          filters:
#            tags:
#              only: /^v.*/
#            branches:
#              ignore: /.*/